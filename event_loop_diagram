+=========================================================================================+
|                                  NodeJS Process                                         |
|=========================================================================================|
|                                        ||                                               |
|  +--------------------------+          ||  <------------ This downward flow, beginning  |
|  |    Resources:  Memory    |<========>||                when the process is executed,  |
|  |--------------------------|          ||                is the thread of execution.    |
|  |                          |         //\\                                              |
|  | +----------------------+ |      +---++---+                                           |
|  | | Shared Address Space | |      | A || B | <--------- Options inside the same flow,  |
|  | +----------------------+ |      +---++---+            like "if" statements, are      |
|  |                          |        \\  //              known as branches.             |
|  | +----------------------+ |         \\//                                              |
|  | | Local/Auto Variables | |          ||  <------------ Branches change the order of   |
|  | +----------------------+ |          ||                operations but happen inside   |
|  |                          |          ||                the same thread.               |
|  | +----------------------+ |          \/                                               |
|  | |   Global Variables   | |   +--------------+                                        |
|  | +----------------------+ |   |  Event Loop  |                                        |
|  |                          |   +--------------+                                        |
|  +--------------------------+          ||                                               |
|                                       //\\  <---------- A split of the execution        |
|                 //<==================//  \\             inside of a process is          |
|                 ||       //         //    \\            commonly called a "thread."     |
|                 ||       ||        ||     ||                                            |
|                 \/       \/        \/     \/                                            |
|              +------+ +------+ +------+ +------+                                        |
|              | STEP | | STEP | | STEP | | STEP | <----- What these steps really do is   |
|              +------+ +------+ +------+ +------+        unimportant, it can be          |
|                 ||       ||       ||      ||            anything. Coordinating many     |
|                 \/       \/       \/      \/            threads can be complex,         |
|              +------+ +------+ +------+ +------+        but also simple.                |
|              | STEP | | STEP | | STEP | | STEP |                                        |
|              +------+ +------+ +------+ +------+                                        |
|                 ||       ||       ||      ||                                            |
|                 \\       \\       \\      //                                            |
|                  \\       \\       \\    //  <--------- No matter whether engine        |
|                   \\       \\       \\  //              internals or application        |
|                    \\===============>\\//               code, it is eventually          |
|                                       ||                seen back at this top           |
|                                       \/                level process.                  |
|                             +---------------------+                                     |
|                             |  Repeat Event Loop  |                                     |
|                             +---------------------+                                     |
|                                       ||                                                |
|                                       \/                                                |
+=========================================================================================+



+=========================================================================================+
|                                    Glossary                                             |
|=========================================================================================|
|                                                                                         |
| NodeJS:               A specific piece of software that acts as a Javascript            |
|                       runtime environment or engine.                                    |
|                                                                                         |
| NodeJS Process:       A compiled NodeJS executable binary file being executed           |
|                       by an operating system. Specifically in these examples,           |
|                       NodeJS v12.16.1 on a recent version of Ubuntu Linux.              |
|                                                                                         |
| Process:              A combined set of resources and a current execution               |
|                       context.                                                          |
|                                                                                         |
| Execution Context:    The state of an executing action or event at a moment             |
|                       in time, like variables and scope.                                |
|                                                                                         |
| Thread:               A current execution context.                                      |
|                                                                                         |
| Resource:             A thing to be used like memory or thread of execution.            |
|                                                                                         |
| Memory:               Blobs of data on a storage medium.                                |
|                                                                                         |
| Shared Address Space: An area of memory accessible to all threads within the            |
|                       process.                                                          |
|                                                                                         |
| Local/Auto Variables: A variable in a specific scope or execution context,              |
|                       here meaning thread and represented by a "block" of               |
|                       code when written as Javascript. Auto is short for                |
|                       "automatic" and means resource allocation for the                 |
|                       variable is handled automatically by its execution                |
|                       context.                                                          |
|                                                                                         |
| Global Variables:     A variable visible to the entire program or process.              |
|                                                                                         |
| Step:                 Any arbitrary action performed by the code.                       |
|                                                                                         |
| Event Loop:           A logical construction for a repeated series of steps.            |
|                                                                                         |
| "A || B":             Quoted literally from diagram, this is also valid Javascript      |
|                       using the Logical OR operator "||" against variables "A"          |
|                       and "B". This part of the diagram in code is:                     |
|                         if (A || B) {                                                   |
|                                                                                         |
+=========================================================================================+
